import fs from "fs"
import { glob } from "glob"
import path from "path"

/**
 * Script to generate a consolidated component registry from multiple directories
 * Combines examples, charts, and other components into a single registry file
 */

// Configuration for directories to scan
interface DirectoryConfig {
  inputDir: string
  prefix: string
  dirName: string
  type: "example" | "chart" | "block"
}

const DIRECTORIES: DirectoryConfig[] = [
  {
    inputDir: path.resolve(process.cwd(), "examples"),
    prefix: "@/examples",
    dirName: "examples",
    type: "example",
  },
  {
    inputDir: path.resolve(process.cwd(), "charts"),
    prefix: "@/charts",
    dirName: "charts",
    type: "chart",
  },
  // Add more directories as needed
]

// Output file location
const OUTPUT_FILE = path.resolve(process.cwd(), "registry/index.tsx")

// Ensure the registry directory exists
const registryDir = path.dirname(OUTPUT_FILE)
if (!fs.existsSync(registryDir)) {
  fs.mkdirSync(registryDir, { recursive: true })
}

/**
 * Main function to process all directories and generate the registry
 */
async function main() {
  try {
    console.log("üèóÔ∏è Building consolidated component registry...\n")

    // Process all directories in parallel
    const results = await Promise.all(
      DIRECTORIES.map((directory) => processDirectory(directory)),
    )

    // Generate the consolidated registry content
    const content = generateRegistryContent(results)

    // Write the registry file
    fs.writeFileSync(OUTPUT_FILE, content, "utf8")

    const totalComponents = results.reduce(
      (sum, result) => sum + result.files.length,
      0,
    )
    console.log(`\n‚úÖ Component registry generated at ${OUTPUT_FILE}`)
    console.log(`üéâ Total components registered: ${totalComponents}`)
  } catch (error) {
    console.error("‚ùå Error building registry:", error)
    process.exit(1)
  }
}

main()

/**
 * Process a directory and return valid component files
 */
async function processDirectory(config: DirectoryConfig): Promise<{
  files: string[]
  directory: DirectoryConfig
}> {
  const { inputDir, dirName: name } = config

  console.log(`üîç Scanning ${name} components...`)

  // Find all component files
  const files = await glob("**/*.tsx", {
    cwd: inputDir,
  })

  console.log(`Found ${files.length} total .tsx files in ${name}`)

  // Filter files to only include those with default exports
  const validFiles = []
  let skippedCount = 0

  for (const file of files) {
    const filePath = path.join(inputDir, file)

    if (hasDefaultExport(filePath)) {
      validFiles.push(file)
    } else {
      skippedCount++
      console.log(`‚ö†Ô∏è Skipping ${name}/${file} (no default export found)`)
    }
  }

  console.log(
    `‚úì Including ${validFiles.length} components with default exports from ${name}`,
  )
  console.log(`‚ÑπÔ∏è Skipped ${skippedCount} files without default exports`)

  return { files: validFiles, directory: config }
}

/**
 * Generate the consolidated registry content
 */
function generateRegistryContent(
  results: Array<{ files: string[]; directory: DirectoryConfig }>,
) {
  const totalComponents = results.reduce(
    (sum, result) => sum + result.files.length,
    0,
  )

  let content = `/**
 * Component Registry - AUTOMATICALLY GENERATED
 * 
 * This file is auto-generated by the build-registry.ts script.
 * DO NOT EDIT THIS FILE DIRECTLY.
 * 
 * Total components registered: ${totalComponents}
 */

import React from "react"

interface ComponentEntry {
  source: string;
  type: "example" | "chart" | "block";
  // eslint-disable-next-line
  component: React.LazyExoticComponent<any>;
}

const COMPONENT_REGISTRY: Record<string, ComponentEntry> = {
`

  // Process each directory's components
  results.forEach(({ files, directory }) => {
    // Group files by their subdirectories
    const filesByDir = files.reduce(
      (acc, file) => {
        const dir = path.dirname(file)
        if (!acc[dir]) acc[dir] = []
        acc[dir].push(file)
        return acc
      },
      {} as Record<string, string[]>,
    )

    // Add each component, organized by subdirectory
    Object.entries(filesByDir).forEach(([_, dirFiles]) => {
      // Add each file in this directory
      dirFiles.forEach((file) => {
        const relativePath = `./${directory.dirName}/${file}`
        const fileWithoutExt = file.replace(/\.tsx$/, "")
        const importPath = `${directory.prefix}/${fileWithoutExt}`

        const componentKey = path.basename(fileWithoutExt)

        content += `  "${componentKey}": {\n`
        content += `    type: "${directory.type}",\n`
        content += `    source: "${relativePath}",\n`
        content += `    component: React.lazy(() => import("${importPath}")),\n`
        content += `  },\n`
      })

      content += "\n"
    })

    content += "\n"
  })

  content += `}

export default COMPONENT_REGISTRY
`

  return content
}

/**
 * Checks if a file has a default export
 */
function hasDefaultExport(filePath: string): boolean {
  try {
    const content = fs.readFileSync(filePath, "utf8")

    // Check for common default export patterns
    const hasStandardDefaultExport = content.includes("export default")
    const hasNamedAsDefault = /export\s+{\s*[^}]+\s+as\s+default\s*}/.test(
      content,
    )
    const hasTypeScriptDefaultExport = /export\s+default\s+function\s+/.test(
      content,
    )
    const hasAsyncDefaultExport = /export\s+default\s+async\s+function\s+/.test(
      content,
    )
    const hasConstDefaultExport =
      /const\s+\w+\s*=\s*.*;\s*export\s+default\s+\w+/.test(content)

    return (
      hasStandardDefaultExport ||
      hasNamedAsDefault ||
      hasTypeScriptDefaultExport ||
      hasAsyncDefaultExport ||
      hasConstDefaultExport
    )
  } catch (error) {
    console.warn(`‚ö†Ô∏è Warning: Could not check exports in ${filePath}:`, error)
    return false
  }
}
